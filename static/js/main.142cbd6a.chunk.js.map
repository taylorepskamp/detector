{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","palette","primary","main","chip","App","canvasRef","useRef","useState","isLoading","setIsLoading","picUrl","setPicUrl","classes","useEffect","canvas","current","width","height","ctx","getContext","img","Image","onload","a","drawImage","ml5","detector","detect","gotDetections","URL","origin","window","location","crossOrigin","src","err","results","console","log","newResults","length","font","text","fillStyle","strokeStyle","fillText","strokeText","obj","x","y","label","confidence","lineWidth","rect","stroke","confidenceText","Math","floor","className","Typography","gutterBottom","variant","component","color","Paper","id","ref","Button","onClick","keywords","keyword","random","Date","getTime","selectPic","Link","href","target","Boolean","hostname","match","createMuiTheme","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.142cbd6a.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { makeStyles} from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport './App.css';\nimport  *  as ml5 from 'ml5';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    listStyle: 'none',\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  palette: {\n    primary: {\n      main: '#E33E7F'\n    }\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\nfunction App() {\n  \n  const canvasRef = useRef(null)\n  const [isLoading,setIsLoading] = useState(false)\n  const [picUrl,setPicUrl] = useState('https://source.unsplash.com/1000x500/?people')\n  const classes = useStyles();\n\n  useEffect(()=>{\n    const canvas = canvasRef.current\n    canvas.width = 1000\n    canvas.height = 550\n    const ctx = canvas.getContext('2d')\n    const img = new Image()\n    img.onload = async () => {\n      ctx.drawImage(img,0,25)\n      setIsLoading(true)\n      const detector = await ml5.objectDetector('cocossd')\n      await detector.detect(img, gotDetections)\n    }\n    if ((new URL(picUrl)).origin !== window.location.origin) {\n      img.crossOrigin = \"\"; //this requests permission from the server\n    }\n    img.src = picUrl\n  },[picUrl])\n\n  const selectPic = () => {\n    const keywords = ['people', 'person', 'animals', 'transportation', 'horse', 'dog', 'sheep', 'bus', 'airplane',\n      'motorcyle', 'train', 'truck', 'hat', 'backpack', 'shoe', 'tie', 'suitcase', 'frisbee', 'kite', 'snowboard',\n      'surfboard', 'bottle', 'plate', 'wine', 'cup', 'banana', 'orange', 'broccoli', 'carrot', 'pizza', 'donut', 'spoon',\n      'bird', 'boat', 'umbrella', 'traffic', 'tennis', 'keyboard', 'scissors', 'vase', 'book', 'toothbrush']\n    const keyword = keywords[Math.floor(Math.random() * keywords.length)]\n\n    setPicUrl(`https://source.unsplash.com/1000x500/?${keyword}&t=\"${new Date().getTime()}\"`)\n  }\n\n  const gotDetections = (err, results) => {\n      if(err){\n        console.log(err)\n      }\n      else{\n        setIsLoading(false)\n        const canvas = canvasRef.current\n        const ctx = canvas.getContext('2d')\n        let newResults = [...results]\n        if(newResults.length === 0){\n          ctx.font = '18px Roboto';\n          let text = '😳 not sure...'\n          ctx.fillStyle = 'white';\n          ctx.strokeStyle = 'black';\n          ctx.fillText(text, 300, 300);\n          ctx.strokeText(text, 300, 300);\n        }\n        else{\n        for(const obj of newResults){\n          const {x,y,width,height,label,confidence} = obj\n          ctx.lineWidth = '4'\n          ctx.strokeStyle = '#F79802'\n          ctx.rect(x+20,y+20,width,height)\n          ctx.stroke()\n          ctx.font = '18px Roboto';\n          let confidenceText = confidence > 0.9 ? `😏  ${Math.floor(confidence*100)}% confident,` : \n                               confidence > 0.8 ? `😀  ${Math.floor(confidence*100)}% confident,` :\n                               confidence > 0.7 ? `😕  ${Math.floor(confidence*100)}% confident,` :\n                                                  `🤤  ${Math.floor(confidence*100)}% confident,`\n          \n          ctx.fillStyle = 'white';\n          ctx.strokeStyle = 'black';\n          ctx.strokeText(confidenceText, x+24, y+40);\n          ctx.fillText(confidenceText, x+24, y+40);\n          ctx.strokeText(`this is a ${label}`, x+54, y+60);\n          ctx.fillText(`this is a ${label}`, x+54, y+60);\n          \n          \n        }\n      }\n    }\n  }\n  return (\n    <div className=\"grid-container\">\n        <div className='Title'>\n              <Typography className='logoTitle' gutterBottom variant=\"h3\" component=\"h3\" color='primary'>\n              🤖 Object Detector 🔎 \n              </Typography> \n        </div> \n        <div className='Canvas'>\n        <Paper id='CanvasChild' component=\"ul\" className={classes.root} >\n          <canvas ref={canvasRef}/>\n        </Paper>\n        </div>\n        <div className='ButtonContainer'>\n        <Button\n              className='Button'\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => selectPic()}\n            >\n              {isLoading? '🤔 ...':'New 📷 '} \n        </Button> \n        <div className='Explain'>\n          <Typography  gutterBottom variant=\"body1\" component=\"body1\" color='primary'>\n                This app uses ml5js with  <Link href='https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd' target='_blank'>\n                COCO SSD\n                </Link>.\n          </Typography> \n        </div>\n        </div> \n       \n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n  palette: {\n     primary: {\n        main: \"#8AB4F8\" // This is an orange looking color\n               },\n     secondary: {\n        main: \"#ffcc80\" //Another orange-ish color\n                }\n           },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n    <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}